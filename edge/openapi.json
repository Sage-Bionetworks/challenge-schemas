{
  "openapi": "3.0.2",
  "info": {
    "version": "0.1.0",
    "title": "Challenge API",
    "termsOfService": "https://example.com/terms/",
    "contact": {
      "email": "contact@example.com",
      "url": "http://example.com/contact"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://redocly.github.io/openapi-template/logo.png"
    },
    "description": "The OpenAPI specification implemented by the Challenge Registries.\n# Introduction\nTBA\n"
  },
  "tags": [
    {
      "name": "Challenge",
      "description": "Challenge operations"
    },
    {
      "name": "Health",
      "description": "Health operations"
    },
    {
      "name": "User",
      "description": "User operations"
    }
  ],
  "servers": [
    {
      "url": "http://example.com/api/v1"
    },
    {
      "url": "https://example.com/api/v1"
    }
  ],
  "paths": {
    "/challenges": {
      "get": {
        "tags": [
          "Challenge"
        ],
        "summary": "Get all challenges",
        "description": "Returns the challenges",
        "operationId": "notes.read_all",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Challenge"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Challenge not found"
          }
        }
      }
    },
    "/challenges/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Updates the challenge for a given ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge"
        ],
        "summary": "Get a challenge by ID",
        "description": "Returns the challenge for a given ID",
        "operationId": "challenges.read",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Challenge not found"
          }
        }
      },
      "put": {
        "tags": [
          "Challenge"
        ],
        "summary": "Update a challenge by ID",
        "description": "This can only be done by the logged in user.",
        "operationId": "challenges.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          },
          "description": "Updated challenge",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid challenge supplied"
          },
          "404": {
            "description": "Challenge not found"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Get Health",
        "description": "Get the health of the service",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Health not found"
          }
        }
      }
    },
    "/users/{username}": {
      "parameters": [
        {
          "name": "pretty_print",
          "in": "query",
          "description": "Pretty print response",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by user name",
        "description": "Some description of the operation.\nYou can use `markdown` here.\n",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_email",
            "in": "query",
            "description": "Filter users without email",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "username": "user1",
                  "email": "user@example.com"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Updated user object",
          "required": true
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Organization": {
        "type": "object",
        "description": "Organization that manages grant funding",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "Grant": {
        "type": "object",
        "description": "Information about monetary resources for challenge",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "sponsor": {
            "$ref": "#/components/schemas/Organization"
          },
          "amount": {
            "type": "integer"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "sponsor"
        ]
      },
      "Challenge": {
        "type": "object",
        "description": "A challenge",
        "properties": {
          "id": {
            "description": "challenge ID",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "challenge name",
            "type": "string"
          },
          "startDate": {
            "description": "challenge launch date",
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "description": "challenge ending date",
            "type": "string",
            "format": "date-time"
          },
          "website": {
            "description": "challenge website",
            "type": "string",
            "format": "url"
          },
          "status": {
            "description": "current status of challenge",
            "type": "string",
            "enum": [
              "upcoming",
              "open",
              "closed"
            ]
          },
          "tags": {
            "description": "challenge metadata/area of expertise",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "grant": {
            "description": "monetary/resources sponsorship for challenge",
            "$ref": "#/components/schemas/Grant"
          }
        },
        "required": [
          "id",
          "name",
          "startDate",
          "endDate",
          "status"
        ]
      },
      "Health": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Health status",
            "type": "string",
            "enum": [
              "pass",
              "warn"
            ]
          }
        }
      },
      "Email": {
        "description": "User email address",
        "type": "string",
        "format": "test",
        "example": "john.smith@example.com"
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "description": "User supplied username",
            "type": "string",
            "minLength": 4,
            "example": "John78"
          },
          "firstName": {
            "description": "User first name",
            "type": "string",
            "minLength": 1,
            "example": "John"
          },
          "lastName": {
            "description": "User last name",
            "type": "string",
            "minLength": 1,
            "example": "Smith"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        },
        "required": [
          "username",
          "firstName",
          "lastName",
          "email"
        ]
      }
    }
  }
}