openapi: 3.0.2
info:
  version: 0.1.0
  title: Registry of Open Community Challenge API
  contact:
    name: The ROCC Team
    email: thomas.schaffter@sagebionetworks.org
    url: 'https://Sage-Bionetworks.github.io/rocc-schemas'
  license:
    name: Apache 2.0
    url: 'https://Sage-Bionetworks.github.io/rocc-schemas'
  x-logo:
    url: 'https://Sage-Bionetworks.github.io/rocc-schemas/logo.png'
  description: |
    The OpenAPI specification implemented by the Challenge Registries.
    # Introduction
    TBA
tags:
  - name: Challenge
    description: Operations about challenges
  - name: User
    description: Operations about users
servers:
  - url: '{protocol}://rocc.org/api/v1'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
paths:
  /challenges:
    post:
      tags:
        - Challenge
      summary: Add a challenge
      description: Adds a challenge
      operationId: createChallenge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Challenge'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
          description: Success
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
    get:
      tags:
        - Challenge
      summary: List all the challenges
      description: Returns all the challenges
      operationId: listChallenges
      parameters:
        - in: query
          name: limit
          description: Maximum number of results returned
          required: false
          schema:
            type: integer
            default: 10
            minimum: 10
            maximum: 100
        - in: query
          name: offset
          description: Index of the first result that must be returned
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfChallenges'
          description: Success
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/challenges/{id}':
    parameters:
      - name: id
        in: path
        description: The ID of the challenge
        required: true
        schema:
          type: string
    get:
      tags:
        - Challenge
      summary: Get a challenge
      description: Returns the challenge specified
      operationId: getChallenge
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Challenge
      summary: Delete a challenge
      description: Deletes the challenge specified
      operationId: deleteChallenge
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  '/users/{username}':
    get:
      tags:
        - User
      summary: Get user by user name
      description: Gets the user with the specified name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The username of the user who needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    ResponsePageMetadata:
      type: object
      description: A page of results
      properties:
        offset:
          description: Index of the first result that must be returned
          type: integer
        limit:
          description: Maximum number of results returned
          type: integer
        links:
          description: Links to navigate to different pages of results
          type: object
          properties:
            next:
              description: Link to the next page of results
              type: string
              format: uri
      required:
        - offset
        - limit
        - links
    Organization:
      type: object
      description: An organization
      properties:
        id:
          description: The ID of the organization
          type: string
          readOnly: true
          example: 507f1f77bcf86cd799439011
        name:
          description: The organization name
          type: string
          example: Sage Bionetworks
        url:
          description: The URL to the homepage of the organization
          type: string
          format: uri
          example: 'https://sagebionetworks.org/'
      required:
        - name
        - url
    Grant:
      type: object
      description: Information about monetary resources for challenge
      properties:
        id:
          description: The ID of the grant
          type: string
          readOnly: true
          example: 507f1f77bcf86cd799439011
        name:
          description: The grant name
          type: string
        description:
          description: A description of the grant
          type: string
        sponsor:
          $ref: '#/components/schemas/Organization'
        amount:
          description: The amount of the grant in USD
          type: integer
        url:
          description: The URL to the grant
          type: string
          format: uri
      required:
        - name
        - sponsor
    Email:
      description: An email address
      type: string
      format: email
      example: john.smith@example.com
    Person:
      type: object
      description: A person
      properties:
        id:
          description: The ID of a person
          type: string
          readOnly: true
          example: 507f1f77bcf86cd799439011
        firstName:
          description: The first name of a person
          type: string
          minLength: 1
          example: John
        lastName:
          description: The last name of a Person
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
      required:
        - firstName
        - email
    Challenge:
      type: object
      description: A challenge
      properties:
        id:
          description: The ID of the challenge
          type: string
          readOnly: true
          example: 507f1f77bcf86cd799439011
        name:
          description: The challenge name
          type: string
          example: Sample Challenge
        startDate:
          description: When the challenge started
          type: string
          format: date
          example: '2020-11-10'
        endDate:
          description: When the challenge ended
          type: string
          format: date
          example: '2020-12-31'
        url:
          description: The URL to the challenge website
          type: string
          format: uri
          example: 'https://synapse.org/sample-challenge'
        status:
          description: The status of challenge
          type: string
          enum:
            - upcoming
            - open
            - closed
          example: open
        tags:
          description: The tags associated to the challenge
          type: array
          items:
            type: string
          minItems: 1
          example:
            - Machine Learning
            - Breast Cancer
        grant:
          description: The grants supporting this challenge
          type: array
          items:
            $ref: '#/components/schemas/Grant'
        organizers:
          description: The organizers of the challenge
          type: array
          items:
            $ref: '#/components/schemas/Person'
      required:
        - name
        - startDate
        - endDate
        - status
    PageOfChallenges:
      type: object
      description: A page of Challenges
      allOf:
        - $ref: '#/components/schemas/ResponsePageMetadata'
        - type: object
          properties:
            challenges:
              description: An array of Challenges
              type: array
              items:
                $ref: '#/components/schemas/Challenge'
    Error:
      type: object
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          type: string
          description: A human readable documentation for the problem type
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem
        type:
          type: string
          description: An absolute URI that identifies the problem type
      required:
        - title
        - status
    User:
      type: object
      description: A user of the API
      properties:
        id:
          description: The ID of the user
          type: string
          readOnly: true
          example: 507f1f77bcf86cd799439011
        username:
          description: The username of the user
          type: string
          minLength: 4
          example: John78
        password:
          description: The password of the user
          type: string
          format: password
          minLength: 3
          writeOnly: true
        firstName:
          description: The first name of the user
          type: string
          minLength: 1
          example: John
        lastName:
          description: The last name of the user
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
        role:
          description: The role of the user
          type: string
          enum:
            - user
            - admin
          default: user
          example: user
        organizations:
          description: The organizations the user belongs to
          type: array
          items:
            $ref: '#/components/schemas/Organization'
      required:
        - username
        - email
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: The request conflicts with current state of the target resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
