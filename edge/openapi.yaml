openapi: 3.0.2
info:
  version: 0.1.0
  title: Challenge API
  termsOfService: 'https://example.com/terms/'
  contact:
    email: contact@example.com
    url: 'http://example.com/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://redocly.github.io/openapi-template/logo.png'
  description: |
    The OpenAPI specification implemented by the Challenge Registries.
    # Introduction
    TBA
tags:
  - name: Challenge
    description: Challenge operations
  - name: Health
    description: Health operations
  - name: User
    description: User operations
servers:
  - url: 'http://example.com/api/v1'
  - url: 'https://example.com/api/v1'
paths:
  /challenges:
    get:
      tags:
        - Challenge
      summary: Get all challenges
      description: Returns the challenges
      operationId: notes.read_all
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challenge'
        '403':
          description: Forbidden
        '404':
          description: Challenge not found
  '/challenges/{id}':
    get:
      tags:
        - Challenge
      summary: Get a challenge by ID
      description: Returns the challenge for a given ID
      operationId: challenges.read
      parameters:
        - name: id
          in: path
          description: The ID of the challenge to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
        '403':
          description: Forbidden
        '404':
          description: Challenge not found
    put:
      tags:
        - Challenge
      summary: Update a challenge by ID
      description: This can only be done by the logged in user.
      operationId: challenges.update
      parameters:
        - name: id
          in: path
          description: Updates the challenge for a given ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid challenge supplied
        '404':
          description: Challenge not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Challenge'
        description: Updated challenge
        required: true
  /health:
    get:
      tags:
        - Health
      summary: Get Health
      description: Get the health of the service
      operationId: health
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '403':
          description: Forbidden
        '404':
          description: Health not found
  '/users/{username}':
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get:
      tags:
        - User
      summary: Get user by user name
      description: |
        Some description of the operation.
        You can use `markdown` here.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
        - name: with_email
          in: query
          description: Filter users without email
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: user1
                email: user@example.com
        '403':
          description: Forbidden
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
components:
  schemas:
    Entity:
      type: object
      properties:
        id:
          description: ID
          type: integer
        createdBy:
          description: The User who created this entity
          $ref: '#/components/schemas/User'
        createdAt:
          description: When the entity has been created
          type: string
          format: date-time
        updatedBy:
          description: The User who update this entity
          $ref: '#/components/schemas/User'
        updatedAt:
          description: When the entity has been updated
          type: string
          format: date-time
      required:
        - id
    Email:
      description: User email address
      type: string
      format: test
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
      required:
        - username
        - firstName
        - lastName
        - email
      allOf:
        - $ref: '#/components/schemas/Entity'
    Challenge:
      type: object
      description: A challenge
      properties:
        title:
          description: The challenge title
          type: string
      required:
        - title
      allOf:
        - $ref: '#/components/schemas/Entity'
    Health:
      type: object
      properties:
        status:
          description: Health status
          type: string
          enum:
            - pass
            - warn
