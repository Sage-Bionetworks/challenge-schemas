{
  "openapi": "3.0.2",
  "info": {
    "version": "0.1.0",
    "title": "Challenge API",
    "termsOfService": "https://example.com/terms/",
    "contact": {
      "email": "contact@example.com",
      "url": "http://example.com/contact"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "rocc_logo_black.png"
    },
    "description": "The OpenAPI specification implemented by the Challenge Registries.\n# Introduction\nTBA\n"
  },
  "tags": [
    {
      "name": "Challenge",
      "description": "Challenge operations"
    },
    {
      "name": "User",
      "description": "User operations"
    }
  ],
  "servers": [
    {
      "url": "{protocol}://rocc.com/{environment}/v1",
      "variables": {
        "protocol": {
          "enum": [
            "http",
            "https"
          ],
          "default": "https"
        },
        "environment": {
          "enum": [
            "api",
            "api.dev"
          ],
          "default": "api.dev"
        }
      }
    }
  ],
  "paths": {
    "/challenges": {
      "post": {
        "tags": [
          "Challenge"
        ],
        "summary": "Adds a challenge",
        "description": "This can only be done by a Challenge Organizer",
        "operationId": "challenges.create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              },
              "example": {
                "id": "CH1234567",
                "name": "Sample Challenge",
                "startDate": "2020-11-10",
                "endDate": "2020-12-31",
                "status": "open"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Challenge created"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "Challenge"
        ],
        "summary": "Lists all challenges",
        "operationId": "challenges.read_all",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Challenge"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Request not available"
          }
        }
      }
    },
    "/challenges/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "challenge ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Challenge"
        ],
        "summary": "Lists one challenge",
        "description": "Returns the challenge for a given ID",
        "operationId": "challenges.read",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          },
          "400": {
            "description": "Invalid challenge ID"
          },
          "422": {
            "description": "Challenge not found"
          }
        }
      },
      "put": {
        "tags": [
          "Challenge"
        ],
        "summary": "Updates all details of a challenge",
        "description": "Updates all details of the given challenge ID.\n\nThis action can only be done by a Challenge Organizer.\n",
        "operationId": "challenges.update_all",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid challenge ID"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Challenge not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Challenge"
        ],
        "summary": "Updates selected details of a challenge",
        "description": "Updates and/or adds one or more details of the given challenge ID.\n\nThis action can only be done by a Challenge Organizer.\n",
        "operationId": "challenges.update",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid challenge ID"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Challenge not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Challenge"
        ],
        "summary": "Removes a challenge",
        "description": "Removes the challenge of the given ID\n\nThis action can only be done by a Challenge Organizer.\n",
        "operationId": "challenges.delete",
        "responses": {
          "204": {
            "description": "Challenge removed"
          },
          "400": {
            "description": "Invalid challenge ID"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Challenge not found"
          }
        }
      }
    },
    "/users/{username}": {
      "parameters": [
        {
          "name": "pretty_print",
          "in": "query",
          "description": "Pretty print response",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user by user name",
        "description": "Some description of the operation.\nYou can use `markdown` here.\n",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_email",
            "in": "query",
            "description": "Filter users without email",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "username": "user1",
                  "email": "user@example.com"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Updated user object",
          "required": true
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Organization": {
        "type": "object",
        "description": "Organization",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "Grant": {
        "type": "object",
        "description": "Information about monetary resources for challenge",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "sponsor": {
            "$ref": "#/components/schemas/Organization"
          },
          "amount": {
            "type": "integer",
            "format": "float"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "sponsor"
        ]
      },
      "Email": {
        "description": "User email address",
        "type": "string",
        "format": "test",
        "example": "john.smith@example.com"
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "example": "Smith"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        },
        "required": [
          "firstName",
          "email"
        ]
      },
      "Challenge": {
        "type": "object",
        "description": "A challenge",
        "properties": {
          "id": {
            "description": "Challenge ID",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "description": "Name of challenge",
            "type": "string"
          },
          "startDate": {
            "description": "Starting date (when submissions are accepted) in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "description": "Ending date (when submissions are no longer accepted) in YYYY-MM-DD format",
            "type": "string",
            "format": "date"
          },
          "website": {
            "description": "URL to challenge website",
            "type": "string",
            "format": "url"
          },
          "status": {
            "description": "Current status of challenge",
            "type": "string",
            "enum": [
              "upcoming",
              "open",
              "closed"
            ]
          },
          "tags": {
            "description": "Domains/area of expertise, e.g. \"Breast Cancer\", \"Machine Learning\"",
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          },
          "grant": {
            "description": "Monetary/resources sponsorship for challenge",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Grant"
            }
          },
          "organizers": {
            "description": "Persons involved with the challenge, e.g. clinical leads, data providers, governance",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          }
        },
        "required": [
          "name",
          "startDate",
          "endDate",
          "status"
        ],
        "example": {
          "id": "CH1234567",
          "name": "Sample Challenge",
          "startDate": "2020-11-10",
          "endDate": "2020-12-31",
          "website": "www.rocc.com/challenges/CH1234567",
          "status": "closed",
          "tags": [
            "Machine Learning"
          ],
          "organizers": [
            {
              "id": 1,
              "firstName": "John",
              "lastName": "Smith",
              "email": "john.smith@example.org"
            },
            {
              "id": 2,
              "firstName": "J",
              "lastName": "Doe",
              "email": "jane.doe@example.org"
            }
          ]
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "minLength": 4
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 3,
            "writeOnly": true
          },
          "firstName": {
            "description": "User first name",
            "type": "string",
            "minLength": 1
          },
          "lastName": {
            "description": "User last name",
            "type": "string",
            "minLength": 1
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "role": {
            "type": "string",
            "enum": [
              "user",
              "admin"
            ],
            "default": "user"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          }
        },
        "required": [
          "username",
          "email"
        ],
        "example": {
          "id": 1,
          "username": "John78",
          "firstName": "John",
          "lastName": "Smith",
          "email": "john.smith@example.com",
          "organizations": [
            {
              "id": 1,
              "name": "Organization1"
            }
          ]
        }
      }
    }
  }
}